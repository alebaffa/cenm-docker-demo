# database configuration
database {
    driverClassName = "org.h2.Driver"
    url = "jdbc:h2:file:./auth-persistence;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=10000;WRITE_DELAY=0;AUTO_SERVER_PORT=0"
    user = "testuser"
    password = "password"
    runMigration = true
}
# JSON Web Key configration for JWT signing
jwk {
    # Location of the RSA keypair store for singing (MUST BE absolute path)
    location = "mytest.jks"
    # Password for the keystore
    password = "mypass"
    # Key alias for the RSA keypair, default value is 'cordaauthjwk'
    keyAlias = "mytest"
}
# Client configuration, this should contain credentials and config for FARM service instances
clientConfig = {
    clients = [
        {
            # Client id, must be the same as configured for FARM
            clientId = "farm1"
            # Client secret, must be the same as configured for FARM
            clientSecret = "secret1"
            # Available scopes for this FARM service instance, can be any of the below:
            #  - accounts:admin
            #    - indicates access to user management from the FARM service
            #  - accounts:user
            #    - indicates zone access from the FARM service
            # default value is 'accounts:user'
            scopes = [
                "accounts:admin"
            ]
            # This is a list of services that will accept the token generated through
            # this FARM instance, possible values (it is case sensitive):
            #  - zone (zone service)
            #  - identity-manager (doorman service)
            #  - signer (signer service)
            #  - network-map (network-map service)
            audience = [
                "zone", "identity-manager"
            ]
            # access token validity
            # Should be short, default is 1 hour
            accessTokenValidity = 300
            # refresh token validity
            # should be in sync with company 'stay logged in' policy
            # default value is 7 days
            refreshTokenValidity = 6000
        }
    ],
    # Issuer value for the JWTs, must match with whatever is configured for CENM services
    # Default is 'accounts-service'
    issuer = "accounts-service"
}
# Configuration for the web server
server {
    # listening port
    port = 8081
    # SSL data
    ssl = {
        keyStore = {
            # MUST BE absolute path
            location = "corda-ssl-network-map-keys.jks"
            password = "password"
            # Defaults to 'cordasslauthservice' if not set
            keyAlias = "cordasslnetworkmap"
        }
        trustStore = {
            # MUST BE absolute path
            location = "corda-ssl-trust-store.jks"
            password = "trustpass"
        }
    }
}
# Optional password policy settings
passwordPolicy = {
    # Enables password expiration
    # Disabled by default
    expiration = {
        enabled = true
        passwordMaxAge = 1
    }
    # Enables automatic user lockout after a certain number of failed login attempts
    # Disabled by default
    lock = {
        enabled = true
        loginAttempts = 1
    }
}
# Configuration of the permissions and role baselines
# This is not mandatory if the plugin is placed into the /plugins folder in the application
# working directory it will be picked up automatically
# baseline {
#     permission = {
#         baselineClass = "com.r3.appeng.accounts.cenm.PermissionBaselineImpl"
#         baselinePackage = "/usr/auth/accounts-baseline-cenm.jar"
#     }

#     role = {
#         baselineClass = "com.r3.appeng.accounts.cenm.RoleBaselineImpl"
#         baselinePackage = "/usr/auth/accounts-baseline-cenm.jar"
#     }
# }